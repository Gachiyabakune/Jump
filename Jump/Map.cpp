#include "Map.h"
#include <DxLib.h>
#include "Player.h"

namespace
{
	// マップデータ
	int MapData[NUM_MAP_Y][NUM_MAP_X] =
	{
		// 横24x18
		// マップ10
		    {2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
		// マップ9
		    {2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
		 	{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
		// マップ8
		    {2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
		// マップ7
		    {2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
		// マップ6
		    {2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
		// マップ5
		    {2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 3, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 2, 2,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 2, 2, 2,   2, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 5, 5, 2,   2, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 5, 5, 2,   2, 5, 5, 2},
		// マップ4
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 5, 5, 2,   2, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 5, 5, 2,   2, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 5, 5, 2,   2, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 2, 2, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 2, 2,   2, 2, 5, 5, 2,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 2, 2, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
		// マップ3
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 2, 2,   2, 2, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 2,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 2, 2, 2,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 2, 2,   2, 2, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 2, 2, 2, 2,   2, 2, 2, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2, 2,   5, 5, 5, 5, 5,   5, 5, 5, 2},
		// マップ2
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2, 2,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2, 2,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 2, 2,   2, 2, 2, 2, 2,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 2, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 2, 5, 5,   2, 2, 5, 5, 2,   2, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 2, 2, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   2, 2, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   2, 2, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
		// マップ1
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 2, 2,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},

			{2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2},
			{2, 2, 5, 5, 5,   5, 5, 5, 5, 5,   2, 2, 2, 2, 5,   5, 5, 5, 5, 5,   5, 5, 2, 2},
			{2, 2, 2, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 2, 2, 2},
			{2, 2, 2, 2, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   2, 2, 2, 2},
			{2, 2, 2, 2, 2,   5, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 5, 2,   2, 2, 2, 2},

			{2, 2, 2, 2, 2,   2, 5, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 5, 2, 2,   2, 2, 2, 2},
			{2, 2, 2, 2, 2,   2, 2, 5, 5, 5,   5, 5, 5, 5, 5,   5, 5, 2, 2, 2,   2, 2, 2, 2},
			{2, 2, 2, 2, 2,   2, 2, 2, 5, 5,   5, 5, 5, 5, 5,   5, 2, 2, 2, 2,   2, 2, 2, 2},
			{2, 2, 2, 2, 2,   2, 2, 2, 2, 5,   5, 5, 5, 5, 5,   2, 2, 2, 2, 2,   2, 2, 2, 2},
			{2, 2, 2, 2, 2,   2, 2, 2, 2, 2,   2, 2, 2, 2, 2,   2, 2, 2, 2 ,2,   2, 2, 2, 2},
	};

}
Map::Map() : 
	offset(0),
	mapChangeInterval(0),
	nowStage(0),
	pPlayer(nullptr)
{
}



void Map::init()
{
	nowStage = 1;

	//マップ
	LoadDivGraph("data/mapchip.png",
		MapChipAll,
		MapChipX, MapChipY,
		MapSize, MapSize,
		Mchip);
	
	skyH = LoadGraph("data/sora.png");
	cloudH = LoadGraph("data/cloud.png");
	cloudH2 = LoadGraph("data/kumo.png");
}

void Map::updata()
{
	//下画面から上画面
	bool typeA = pPlayer->getPos() < 0 - MapSize && mapChangeInterval >= 60;
	//上画面から下画面
	bool typeB = pPlayer->getPos() >= Game::kScreenHight && mapChangeInterval >= 6;	//インターバル0.1秒

	//今いるステージで切り分ける
	switch (nowStage)
	{
	case 1:	//ステージ1
		offset = -Game::kScreenHight * (MapStage - 1);
		mapChangeInterval++;
		if (typeA)
		{
			//一つ上のステージに上がる
			nowStage = 2;
			mapChangeInterval = 0;
		}
		break;
	case 2:	//ステージ2
		offset = -Game::kScreenHight * (MapStage - 2);
		mapChangeInterval++;
		if (typeA)
		{
			nowStage = 3;
			mapChangeInterval = 0;
		}
		if (typeB)
		{
			//一つ下のステージに下がる
			nowStage = 1;
			mapChangeInterval = 0;
		}
		break;
	case 3:	//ステージ3
		offset = -Game::kScreenHight * (MapStage - 3);
		mapChangeInterval++;
		if (typeA)
		{
			nowStage = 4;
			mapChangeInterval = 0;
		}
		if (typeB)
		{
			nowStage = 2;
			mapChangeInterval = 0;
		}
		break;
	case 4:	//ステージ4
		offset = -Game::kScreenHight * (MapStage - 4);
		mapChangeInterval++;
		if (typeA)
		{
			nowStage = 5;
			mapChangeInterval = 0;
		}
		if (typeB)
		{
			nowStage = 3;
			mapChangeInterval = 0;
		}
		break;
	case 5:	//ステージ5
		offset = -Game::kScreenHight * (MapStage - 5);
		mapChangeInterval++;
		if (typeA)
		{
			nowStage = 6;
			mapChangeInterval = 0;
		}
		if (typeB)
		{
			nowStage = 4;
			mapChangeInterval = 0;
		}
		break;
	case 6:	//ステージ6
		offset = -Game::kScreenHight * (MapStage - 6);
		mapChangeInterval++;
		if (typeA)
		{
			nowStage = 7;
			mapChangeInterval = 0;
		}
		if (typeB)
		{
			nowStage = 5;
			mapChangeInterval = 0;
		}
		break;
	case 7:	//ステージ5
		offset = -Game::kScreenHight * (MapStage - 7);
		mapChangeInterval++;
		if (typeA)
		{
			nowStage = 8;
			mapChangeInterval = 0;
		}
		if (typeB)
		{
			nowStage = 6;
			mapChangeInterval = 0;
		}
		break;
	case 8:	//ステージ5
		offset = -Game::kScreenHight * (MapStage - 8);
		mapChangeInterval++;
		if (typeA)
		{
			nowStage = 9;
			mapChangeInterval = 0;
		}
		if (typeB)
		{
			nowStage = 7;
			mapChangeInterval = 0;
		}
		break;
	case 9:	//ステージ5
		offset = -Game::kScreenHight * (MapStage - 9);
		mapChangeInterval++;
		if (typeA)
		{
			nowStage = 10;
			mapChangeInterval = 0;
		}
		if (typeB)
		{
			nowStage = 8;
			mapChangeInterval = 0;
		}
		break;
	case 10:	//ステージ5
		offset = -Game::kScreenHight * (MapStage - 10);
		mapChangeInterval++;

		if (typeB)
		{
			nowStage = 9;
			mapChangeInterval = 0;
		}
		break;
	default:
		break;
	}
}

void Map::draw()
{
	DrawGraph(0, 0, skyH, false);
	DrawGraph(0, 0, cloudH2, true);
	//DrawGraph(0, 480, cloudH, true);
	for (int y = 0; y < NUM_MAP_Y; y++)
	{
		for (int x = 0; x < NUM_MAP_X; x++)
		{
			int posX = x * MapSize;
			int posY = y * MapSize + offset;
			//2は当たり判定チップを表しているので2のところだけ描画
			if (MapData[y][x] == 2)
			{
				DrawGraph(posX, posY, Mchip[17], FALSE);
			}
			//3はゴール
			else if (MapData[y][x] == 3)
			{
				DrawGraph(posX, posY, Mchip[9], FALSE);
			}
		}
	}
}

int Map::GetChipParam(float X, float Y)
{
	int x, y;

	// 整数値へ変換
	x = (int)X / MapSize;
	y = (int)Y / MapSize;

	// マップからはみ出ていたら 0 を返す
	if (x >= NUM_MAP_X || y >= NUM_MAP_Y || x < 0 || y < 0) return 0;

	// 指定の座標に該当するマップの情報を返す
	return MapData[y][x];
}
